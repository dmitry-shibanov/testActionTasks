name: Setup-java
on:
  workflow_dispatch:
  
jobs:
  test-ip-ubuntu:
    runs-on: ${{ matrix.os }}
    # defaults:
    #   run:
    #     shell: bash -el {0}
#     env:
#       PIP_DISABLE_PIP_VERSION_CHECK: 1
#       PIP_NO_PYTHON_VERSION_WARNING: 1
#       PIP_ROOT_USER_ACTION: ignore
    strategy:
      fail-fast: false
      matrix:
        os: [macos-12-arm64] # macos-11
        # version: ["==3.10.10", "==3.10"]
    steps:
      - uses: actions/checkout@v3
      # - run: cat /etc/lsb-release
      # - run: cat /etc/os-release
      # - run: |
      #     sudo apt-get remove -y python3

      #     wget https://github.com/pyston/pyston/releases/download/pyston_2.3.5/pyston_2.3.5_20.04_amd64.deb
      #     ls
      #     currentPath=$(pwd)
      #     echo "currentPath is $currentPath"
      #     sudo apt install $currentPath/pyston_2.3.5_20.04_amd64.deb
      #     ls /usr/lib/
      #     python3 --version
      #     # which python
          
      # - run: |
      #     # python --version
      #     ls /usr/bin
      #     which python3
      #     echo "check python3.8-pyston2.3"
      #     python3.8-pyston2.3 --version
      #     echo "check python3.8"
      #     python3.8 --version
      #     echo "check with python code"
      #     echo -e "import sys\nprint(hasattr(sys, 'pyston_version_info'))" | python3.8-pyston2.3




          
      - run: |
          echo "--------start ls-------------"
          ls -lA /usr/local/Cellar/python@3.11/3.11.4_1/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages
          echo "--------end ls-------------"
          node -e "const fs = require('fs');console.log(fs.realpathSync('/usr/local/Cellar/python@3.11/3.11.4_1/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages'))"
          echo "--------start ls /usr/local/lib/python3.11/site-packages-------------"
          ls -lA /usr/local/lib/python3.11/site-packages
          echo "--------end ls /usr/local/lib/python3.11/site-packages-------------"
          echo "--------which-------------"
          which python
          echo "--------forget python 2.7-------------"
          pkgutil --pkgs
          sudo pkgutil --forget org.python.Python.PythonFramework-2.7
          echo "--------start ls-------------"
          ls -la /Users/runner/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages
          echo "--------end ls-------------"
          brew ls python@3.11
          brew uninstall --ignore-dependencies python@3.11
          echo "--------start ls toolcache python 3.11-------------"
          ls -la /Users/runner/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages
          echo "--------end ls toolcache python 3.11-------------"
          echo $PATH
          echo "--------start ls /Library/Frameworks/Python.framework/Versions/Current/bin-------------"
          ls -lA /Library/Frameworks/Python.framework/Versions/Current/bin
          echo "--------end ls /Library/Frameworks/Python.framework/Versions/Current/bin-------------"
          pip show pip
          pip install pip==23.0
          pip show pip
      # - uses: pnpm/action-setup@v2
      #   with:
      #     version: 7.33
      # - run: pnpm store path -- --silent --ignore-workspace
      # - run: node -e "const child_prosecc = require('child_process');console.log(child_prosecc.execSync('pnpm store path').toString());"
      # - run: pnpm add express semver
      # - run: pnpm store path --silent
      # - run: node -e "const child_prosecc = require('child_process');console.log(child_prosecc.execSync('pnpm store path --silent').toString());"
      # # - run: npm install express semver jest
      # - run: ls
      # - uses: actions/setup-node@main # dmitry-shibanov/setup-node@v-dmshib/add-debug-lines # actions/setup-node@v3.7.0 # 
      #   with:
      #     node-version: 18
      #     cache: pnpm
      #     cache-dependency-path: .github/workflows/setup-java.yml
      # - run: node --version
      
      # - run: rm -rf /home/runner/setup-pnpm/node_modules/.bin/store/v3
      
      # - uses: actions/setup-go@v4
      #   with:
      #     go-version: '~1.21.0-0'
      # - run: go version
      # - run: |
      #     # find /Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages -name 'pip-*.dist-info'
      #     ls -lA /Users/runner/hostedtoolcache/Python/3.11.4
      #     ls -lA /Users/runner/hostedtoolcache/Python/3.11.4/x64
      #     ls -lA /Users/runner/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages
      #     echo "--------------"
      #     ls -lA /Users/runner/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages
      #     which pip
      #     pip3 show pip
      #     pip3 install --ignore-installed pip==23.0
      #     pip3 show pip
      # - run: |
      #     sudo apt-get update
      #     sudo apt-get install -y --allow-downgrades python3-tk
# #     - run: rm -rf /opt/hostedtoolcache/PyPy/*
#       - run: echo $PATH
#       - run: ls /usr/local/bin
#       - name: Setup Python
#         uses: actions/setup-python@v4
#         id: cpy
#         with:
#           python-version: ${{ matrix.version }}
#       - run: echo '${{ steps.cpy.outputs.python-path }}'
#       - run: ${{ steps.cpy.outputs.python-path }} --version
# #     - run: pip install numpy
#       - run: python --version
#       - run: /usr/local/bin/python --version
#       - run: ls /usr/local/bin
#       - run: which python
#       - run: echo $PATH
#       - name: Checkout
#         uses: actions/checkout@v3
# #         with:
# #           repository: pytorch/TensorRT
# #           ref: main
    
    
# #       - run: echo $env:PATH
# #         shell: pwsh
# #       - name: Download python 2.7
# #         run: |
# #           wget https://github.com/actions/python-versions/releases/download/3.10.12-5200619051/python-3.10.12-linux-20.04-x64.tar.gz -O ${{ runner.temp }}/python-3.10.12-linux-20.04-x64.tar.gz
# #           echo "temporary directory"
# #           ls ${{ runner.temp }}
# #           echo "unpack tar.gz"
# #           mkdir ${{ runner.temp }}/python-3.10.12-linux-20.04-x64
# #           tar -xzvf ${{ runner.temp }}/python-3.10.12-linux-20.04-x64.tar.gz -C ${{ runner.temp }}/python-3.10.12-linux-20.04-x64
# #           echo "temporary directory"
# #           ls ${{ runner.temp }}
#       - run: echo ${{ runner.temp }}
#       - run: node -e "const os = require('os');console.log(os.tmpdir())"
#       - run: node -e "console.log(process.env.RUNNER_TEMP)"
# #       - name: Setup NodeJS
# #         uses: actions/setup-node@v3
# #         with:
# #           node-version: 18
# #           architecture: arm64
# #       - run: pip install pandas
# #       - run: python -m pip install --upgrade pip==22.3.1
# #       - run: python3 -m pip debug
#       - name: Run script
#         run: |
#           echo "run script"
#           bash setup.sh
#         working-directory: ${{ runner.temp }}/python-3.10.12-linux-20.04-x64
#       - run: echo "/opt/hostedtoolcache/Python/3.10.12/x64/" >> $GITHUB_PATH
#       - run: python --version



  # test-setup-python-pipenv:
  #   runs-on: ${{ matrix.os }}
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       os: [ubuntu-22.04, macos-13]
  #   steps:
  #   - name: Setup Python
  #     uses: actions/setup-python@v4 # louislam/setup-node@fix-armv7-cache 
  #     with:
  #       python-version: "3.11"
  #   - run: python --version
        
#     - run: python --version
#     - run: pip --version
#     - run: pip cache dir
#     - run: sudo pip --version
#     - run: sudo pip cache dir
#     - run: sudo pip install numpy --no-binary :all
#     - run: sudo ls $(sudo pip cache dir)
#     - run: sudo ls /home/runner/.cache/pip
#     - run: pip cache dir
#     - run: curl https://raw.githubusercontent.com/pypa/pipenv/master/get-pipenv.py | python
#     - run: pipenv install flake8==6.0.0 numpy==1.25.1 # --python 3.9
#     - run: ls
#     - run: cat Pipfile
#     - run: cat Pipfile.lock


#   test-setup-node-v3:
#     runs-on: ${{ matrix.os }}
#     strategy:
#       fail-fast: false
#       matrix:
#         os: [ubuntu-20.04, ubuntu-22.04]
#         architecture: [arm, armv7l]
#     steps:
#     - name: Setup Node.js
#       uses: actions/setup-node@v3 # louislam/setup-node@fix-armv7-cache 
#       id: setup-node
#       with:
#         node-version: 16
#         architecture: ${{ matrix.architecture }}
        
#     - name: Setup Node.js
#       uses: actions/setup-node@v3
#       with:
#         node-version: 16
#         architecture: ${{ matrix.architecture }}

  # setup-node-v4:
  #   runs-on: ${{ matrix.os }}
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       os: [windows-latest, ubuntu-latest, windows-2019, ubuntu-22.04, ubuntu-18.04, macos-latest]
  #   steps:
  #   - name: Setup Node
  #     uses: dmitry-shibanov/setup-node@v-dmshib/action-to-node20
  #     with:
  #       node-version: 12
  #   - run: node --version
  # setup-node-main:
  #   runs-on: ${{ matrix.os }}
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       os: [ubuntu-latest, windows-latest]
  #       version: [19, 18]
  #   steps:
  #   - uses: actions/setup-node@main
  #     with:
  #       node-version: ${{ matrix.version }}
  #   - run: node --version

  setup-node-fix-for-cache:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
    steps:
    - uses: actions/checkout@v4
    - uses: aparnajyothi-y/setup-node@addfixforcache
      with:
        node-version: '20'
        cache: npm
        cache-dependency-path: ./package.json
    - run: npm install express@latest axios@latest lodash@latest

  setup-node-fix-for-cache-alternative:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
    steps:
    - uses: actions/checkout@v4
    - uses: xiniria/setup-node@explicitly-exit-process
      with:
        node-version: '20'
        cache: npm
        cache-dependency-path: ./Dockerfile
    - run: npm install express@latest axios@latest lodash@latest

  setup-node-without-fix-for-cache:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: npm
        cache-dependency-path: ./yarn.lock
    - run: npm install express@latest axios@latest lodash@latest

  # setup-go-fix-for-cache:
  #   runs-on: ${{ matrix.os }}
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       os: [ubuntu-latest, windows-latest]
  #   steps:
  #   - uses: actions/checkout@v4
  #   - uses: actions/setup-go@main
  #     with:
  #       go-version: '1.20'
  #       cache-dependency-path: ./package.json
  #   - run: go install golang.org/x/tools/gopls@latest

  # setup-go-without-fix-for-cache:
  #   runs-on: ${{ matrix.os }}
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       os: [ubuntu-latest, windows-latest]
  #   steps:
  #   - uses: actions/checkout@v4
  #   - uses: actions/setup-go@bfd2fb341f32be7281829126376a12a780ca79fc
  #     with:
  #       go-version: '1.20'
  #       cache-dependency-path: ./yarn.lock
  #   - run: go install golang.org/x/tools/gopls@latest


  # setup-python-v5-with-cache-fix:
  #   runs-on: ${{ matrix.os }}
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       os: [ubuntu-latest, windows-latest]
  #   steps:
  #   - uses: actions/checkout@v4
  #   - uses: dmitry-shibanov/setup-python@v-dmshib/update-to-node20
  #     with:
  #       python-version: "3.10"
  #       cache: pip
  #       cache-dependency-path: ./Dockerfile
  #   - run: python --version
  #   - run: pip install Pillow numpy pandas

  # setup-python-v5-without-cache-fix:
  #   runs-on: ${{ matrix.os }}
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       os: [windows-latest, ubuntu-latest]
  #   steps:
  #   - uses: actions/checkout@v4
  #   - uses: takost/setup-python@update-to-node20
  #     with:
  #       python-version: "3.10"
  #       cache: pip
  #       cache-dependency-path: ./Dockerfile
  #   - run: python --version
  #   - run: pip install Pillow numpy pandas
        
  #   - run: python --version
  #   - run: echo "from setuptools import setup" | python
  #   - run: echo "from setuptools.extern import packaging" | python
  # setup-go-v401:
  #   runs-on: ${{ matrix.os }}
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       os: [windows-latest]
  #   steps:
  #   - name: Setup Go
  #     uses: actions/setup-go@v4.0.1
  #     with:
  #       go-version: 1.19.6
        
  # setup-python-container:
  #   runs-on: 'ubuntu-latest'
  #   container:
  #     image: amd64/rust
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       python-version: ["3.11.1", "3.11", "3.12"]
  #   steps:
  #     - uses: actions/checkout@v3
  #     - run: apt-get update && apt-get install -y lsb-release && apt-get clean all
  #       # with:
  #       #   repository: spglib/spglib
  #       #   ref: ae2b2c4c70ebfded63da286412b3de451902ec4a
  #     - run: lsb_release -a
  #     - run: cat /etc/lsb-release
  #     - run: cat /etc/os-release
  #     # - run: |
  #     #     echo -en 'DISTRIB_ID=Ubuntu\nDISTRIB_RELEASE=22.04\nDISTRIB_CODENAME=jammy\nDISTRIB_DESCRIPTION="Ubuntu 22.04.3 LTS"' >> /etc/lsb-release
  #     # - run: apt update && apt install -y lsb-release

  #     - name: Setup python ${{ matrix.python-version }}
  #       uses: actions/setup-python@v4
  #       with:
  #         python-version: ${{ matrix.python-version }}
  #         allow-prereleases: true
  #       # TODO: Replace with editable install once configure presets are available
  #     - run: python --version
  #     - run: pip install numpy

      
