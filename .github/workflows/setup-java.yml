name: Setup-java
on:
  workflow_dispatch:

jobs:
#   test-ip-ubuntu:
#     runs-on: ${{ matrix.os }}
#     strategy:
#       fail-fast: false
#       matrix:
#         os: [macos-latest, ubuntu-latest, windows-latest]
#         distribution: ['current', 'latest', 'node']
#     steps:
#     - name: Checkout repository
#       uses: actions/checkout@v3
#     - name: Set up Python 3.10-dev
#       uses: actions/setup-python@v4
#       with:
#         python-version: 3.10-dev
#     - run: python --version
#     - name: Set up PyPy 3.7
#       uses: actions/setup-python@main
#       with:
#         python-version: pypy3.7
#     - run: python --version
#     - run: |
#         env | grep "JAVA_HOME"
#     - name: Set up JDK 18
#       uses: actions/setup-java@v3
#       with:
#         java-version: '18'
#         distribution: 'zulu'
#     - run: |
#         env | grep "JAVA_HOME"
#     - name: Set up JDK 17
#       uses: actions/setup-java@v3
#       with:
#         java-version: '17'
#         distribution: 'adopt'
#     - run: |
#         env | grep "JAVA_HOME"
# #     - run: python --version
# #     - run: pipx install poetry
#     - name: Set up JDK 11
#       uses: actions/setup-java@v3
#       with:
#         java-version: '11'
#         distribution: 'adopt'
#     - run: |
#         env | grep "JAVA_HOME"
#     - run: java -version
#     - run: node --version
#     - name: Setup Node
#       uses: actions/setup-node@v3
#       with:
#         node-version: 16
#     - run: |
#         npm --version
#         npx --version
# #         cache: npm

#     - run: npm install
#   win-setup-node-action:
#     name: "WIN: Global npm install with setup-node action"
#     runs-on: windows-latest
#     steps:
#       - uses: actions/checkout@v2
#       - uses: actions/setup-node@v3
#         with:
#           node-version: 12
#       - run: npm --version
#       - name: Install latest npm version
#         run: npm install --global npm
#       - run: npm --version
#       - uses: actions/setup-python@v2
#         with:
#           python-version: '3.11.0-alpha.4'
# #       - run: python -m pip install --upgrade pip
#       - run: |
#           pip --version
#           node -e "
#             const { spawn } = require('child_process');
#             const pipCache = spawn('pip', ['cache', 'dir'], {shell: true});

#             pipCache.stdout.on('data', (data) => {
#               console.log('stdout:', data.toString());
#             });

#             pipCache.stderr.on('data', (data) => {
#               console.error('stderr:', data.toString());
#             });

#             pipCache.on('close', (code) => {
#               console.log('child process exited with code', code);
#             });
#             "


#   win-preinstalled-node:
#     runs-on: ubuntu-latest
#     container:
#       image:  ubuntu:20.04
#     steps:
#       - uses: actions/checkout@v2
#       - name: Setup Python
#         id: setup-python
#         uses: actions/setup-python@v3
#         with:
#           python-version: '3.x'
#       - name: Check
#         run: |
#           echo git `git version`;
#           echo branch `git branch --show-current`;
#           echo node `node -v`;
#           echo pnpm `pnpm -v`
#           echo python `python --version`
          
          
  test-setup-python:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.9
#     - run: pipx install poetry
    - run: curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py | python
    - run: source $HOME/.poetry/env
    - run: poetry init -n
    - run: poetry env use "3.9"
    - run: poetry add flake8
    - uses: actions/upload-artifact@v2
      with:
        name: my-artifact
        path: |
          pyproject.toml
          poetry.lock
