name: Setup-java
on:
  workflow_dispatch:
  
permissions:
  packages: read
  
jobs:
  test-ip-ubuntu:
    runs-on: ${{ matrix.os }}
#     defaults:
#       run:
#         shell: bash
#     env:
#       PIP_DISABLE_PIP_VERSION_CHECK: 1
#       PIP_NO_PYTHON_VERSION_WARNING: 1
#       PIP_ROOT_USER_ACTION: ignore
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-22.04, macos-latest, windows-latest]
    steps:
      - name: Checkout
        uses: actions/checkout@v3


#       - run: node -e "console.debug('hi\n');console.log('from log');"
#       - run: echo "GITHUB_PATH is $GITHUB_PATH"
#       - name: Setup Go
#         uses: actions/setup-go@v4
#         with:
#           go-version: '1.20'
#           cache: false
#       - run: which go
#       - run: go version
      

#       - run: pip install pandas
#       - run: |
          
#           git clone https://github.com/dmitry-shibanov/setup-go
#           cd setup-go
#           git checkout v-dmshib/test-7zr
#           Invoke-RestMethod -Uri "https://github.com/actions/go-versions/releases/download/1.20.1-4202765537/go-1.20.1-win32-x64.zip" -OutFile "./go-1.20.1-win32-x64.zip"
#           mkdir go-1.20.1-win32-x64
#           node -e "const exec = require('child_process').execSync; const path = require('path'); const cwd = process.cwd(); const fullPath = path.join(cwd, 'externals', '7z2201-x64.exe'); const command = fullPath + ' ' + 'x go-1.20.1-win32-x64.zip -o go-1.20.1-win32-x64'; exec(command)"
#           cd go-1.20.1-win32-x64
#           ls
#       - name: Set up Nodejs
#         uses: actions/setup-node@v3.5.1
#         with:
#           node-version: 18
#           check-latest: true
#           cache: npm
#           cache-dependency-path: ./package.json
#       - run: node --version
#       - run: npm --version
#       - run: npm config get cache
#       - run: python --version
#       - run: pip --version
#       - run: python -m pip install pip==20.3.4
#       - run: pip --version
#       - run: sudo pip --version
#       - run: sudo python3 -m pip install pip==23.0.1 # ==20.3.4
#       - run: sudo -E pip --version
#       - run: sudo -E pip install numpy
#       - run: go version
#       - name: python-check
#         run: python --version
#         shell: bash
# #       - run: python --version
#       - run: Write-Host $env:PATH
#       - run: Write-Host $env:GITHUB_PATH
#       - run: echo "C:\Windows\System32\WindowsPowerShell\v1.0" >> $env:GITHUB_PATH
#         shell: powershell
#       - run: Write-Host $env:PATH
#         shell: powershell
#       - name: print github env
#         shell: powershell
#         run : echo ${core.addPath}
#       - name: Setup Go 1.20
#         uses: actions/setup-go@v3
#         with:
#           go-version: '1.20'
#           check-latest: true
#       - run: |
#           echo "-----------------"
#           sudo echo $PATH
#           echo "-------------------------"
#           ls $(go env GOROOT)
#           echo "-------------------------"
#           ls $(go env GOPATH)
#       - run: go version
#       - run: go env GOMODCACHE
#       - run: go env GOCACHE
#       - name: Setup Go oldstable
#         uses: dmitry-shibanov/setup-go@test-dist-aliases
#         with:
#           go-version: oldstable
#           check-latest: true
#       - run: go version
# #       - name: Setup Go oldstable
# #         uses: dmitry-shibanov/setup-go@test-dist-aliases
# #         with:
# #           go-version: oldstable
# #           check-latest: true
# #           architecture: arm64
#       - run: go version
      - name: Download Adopt OpenJDK file
        run: |
          if ($IsLinux) {
            $downloadUrl = "https://github.com/AdoptOpenJDK/openjdk11-binaries/releases/download/jdk-11.0.10%2B9/OpenJDK11U-jdk_x64_linux_hotspot_11.0.10_9.tar.gz"
            $localFilename = "java_package.tar.gz"
          } elseif ($IsMacOS) {
            $downloadUrl = "https://github.com/AdoptOpenJDK/openjdk11-binaries/releases/download/jdk-11.0.10%2B9/OpenJDK11U-jdk_x64_mac_hotspot_11.0.10_9.tar.gz"
            $localFilename = "java_package.tar.gz"
          } elseif ($IsWindows) {
            $downloadUrl = "https://github.com/AdoptOpenJDK/openjdk11-binaries/releases/download/jdk-11.0.10%2B9/OpenJDK11U-jdk_x64_windows_hotspot_11.0.10_9.zip"
            $localFilename = "java_package.zip"
          }
          echo "LocalFilename=$localFilename" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          (New-Object System.Net.WebClient).DownloadFile($downloadUrl, "$env:RUNNER_TEMP/$localFilename")
        shell: pwsh
      - name: Setup Java
        uses: erwin1/setup-java@feature/fix-local-java-mac
        with:
          distribution: 'jdkfile'
          jdkFile: ${{ runner.temp }}/${{ env.LocalFilename }}
          java-version: '11.0.0-ea'
          architecture: x64
      - run: java -version
      - name: Setup Java
        uses: erwin1/setup-java@feature/fix-local-java-mac
        with:
          distribution: 'jdkfile'
          jdkFile: ${{ runner.temp }}/${{ env.LocalFilename }}
          java-version: '11.0.0-ea'
          architecture: x64
      - run: java -version
#       - name: Setup Java
#         uses: jord1e/setup-java@ibm-semeru
#         with:
#           java-version: 8.0.302+8
#           distribution: semeru
#       - run: java -version
#       - name: Setup Java
#         uses: actions/setup-java@v3
#         with:
#           java-version: 15
#           distribution: corretto
#       - run: java -version
#       - run: go version
# #     - name: Checkout repository
# #       uses: actions/checkout@v3
#     - run: git clone https://github.com/tox-dev/tox.git .
#     - uses: actions/setup-python@main
#       with:
#         python-version: |
#               3.11
#               3.10
#               3.9
#               3.8.8
#               3.7
#         cache: pip
#         check-latest: true
#         cache-dependency-path: tox.ini
#     - run: echo $pythonLocation        
#     - run: python --version
#     - run: pip install tox
#     - run: tox -e py37,py38,py39,py310,py311 -p all
#     - run: tox -p all


#   test-single-tox-run:
#     runs-on: ${{ matrix.os }}
#     env:
#       PIP_DISABLE_PIP_VERSION_CHECK: 1
#     strategy:
#       fail-fast: false
#       matrix:
#         os: [ubuntu-20.04, windows-latest, macos-latest]
#     steps:
#     - run: git clone https://github.com/tox-dev/tox.git .
#     - uses: actions/setup-python@main # dmitry-shibanov/setup-python@v-dmshib/install-multiple-python-versions
#       with:
#         python-version: |
#               3.11
#               3.10
#               3.9
#               3.8.8
#               3.7
#         cache: pip
#         check-latest: true
#         cache-dependency-path: tox.ini
#     - run: echo $pythonLocation        
#     - run: python --version
#     - run: pip install tox
#     - run: tox -e py37
#     - run: tox -e py38
#     - run: tox -e py39
#     - run: tox -e py310
#     - run: tox -e py311
    
    
#   test-multiple-single-python:
#     runs-on: ${{ matrix.os }}
#     strategy:
#       fail-fast: false
#       matrix:
#         os: [ubuntu-20.04, windows-latest, macos-latest]
#     steps:
#     - run: git clone https://github.com/tox-dev/tox.git .
#     - uses: actions/setup-python@main
#       with:
#         python-version: pypy3.9-nightly
#     - run: python --version
#     - uses: actions/setup-python@main
#       with:
#         python-version: pypy3.9-nightly
#     - run: python --version
#   setup-go-aliases:
#     name: ${{ matrix.os }} ${{ matrix.alias }} ${{ matrix.arch }} ${{ matrix.check-latest }}
#     runs-on: ${{ matrix.os }}
#     strategy:
#       fail-fast: false
#       matrix:
#         os: [ubuntu-22.04, windows-latest, macos-latest]
#         alias: [stable, oldstable, 1.17, 1.19.1, 1.20.0-rc1.]
#         arch: [x64, x32, arm, armv6l]
#         check-latest: [true, false]
#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v3
#       - name: Setup Go oldstable
#         uses: actions/setup-go@main
#         with:
#           go-version: ${{ matrix.alias }}
#           check-latest: ${{ matrix.check-latest }}
#           architecture: ${{ matrix.arch }}
#       - run: go version
#       - name: Setup Go oldstable
#         uses: actions/setup-go@main
#         with:
#           go-version: ${{ matrix.alias }}
#           check-latest: ${{ matrix.check-latest }}
#           architecture: ${{ matrix.arch }}
#       - run: go version


#   issue_candidate:
#     runs-on: ubuntu-20.04

#     container:
#       image: ${{ matrix.os }}

#     strategy:
#       fail-fast: false

#       matrix:
#         os:
#           - 'centos:7'
#         python:
#           - '3.6'
#           - '3.7'
#           - '3.8'
#           - '3.9'
#           - '3.10'
#     steps:
#       - name: Setup Python
#         uses: actions/setup-python@v4
#         with:
#           python-version: ${{ matrix.python }}

#       - name: Check that Python is ok
#         run: python --version

#   test:
#     runs-on: ubuntu-22.04
#     container: ubuntu:20.04
#     steps:
#       - run: rm -rf /__t/Python/*
#       - uses: actions/setup-python@v4
#         with:
#           python-version: "3.10"

#       - name: python-check
#         run: python -V
#         shell: bash
          
#   setup-node-check-latest:
#     name: CheckLatest ${{ matrix.os }}
#     runs-on: ${{ matrix.os }}
#     strategy:
#       fail-fast: false
#       matrix:
#         os: [windows-latest, ubuntu-latest]
#     steps:
#     - name: Checkout repository
#       uses: actions/checkout@v3
#     - uses: actions/setup-node@main
#       with:
#         node-version: 20.0.0-nightly202211061f517130dd
#     - run: node --version
#     - uses: actions/setup-node@main
#       with:
#         node-version: 20-nightly
#         check-latest: true
#     - run: node --version
#     - uses: actions/setup-node@main
#       with:
#         node-version: 16-nightly
#     - run: node --version
#     - uses: actions/setup-node@main
#       with:
#         node-version: 16
#     - run: node --version
#     - uses: actions/setup-node@main
#       with:
#         node-version: 16
#         check-latest: true
#     - run: node --version
#     - uses: actions/setup-node@main
#       with:
#         node-version: 20.0.0-v8-canary20221103f7e2421e91
#     - run: node --version
#     - uses: actions/setup-node@main
#       with:
#         node-version: 20.0.0-v8-canary
#         check-latest: true
#     - run: node --version
#     - uses: actions/setup-node@main
#       with:
#         node-version: 16-v8-canary
#         check-latest: true
#     - run: node --version

#   setup-node-toolcache:
#     name: Cache ${{ matrix.os }} ${{ matrix.version }}
#     runs-on: ${{ matrix.os }}
#     strategy:
#       fail-fast: false
#       matrix:
#         os: [windows-latest, ubuntu-latest]
#         version: [17-nightly, 18-nightly, 17.0.0-nightly, 16.0.0-nightly, 19.0.0-nightly202204201fe5d56403, 17.0.0-rc.1, 17.0.0-rc.2, 20-v8-canary, 20.0.0-v8-canary, 20.0.0-v8-canary20221103f7e2421e91, 27, 27-unexisting]
#     steps:
#     - name: Checkout repository
#       uses: actions/checkout@v3
#     - uses: actions/setup-node@main
#       with:
#         node-version: ${{ matrix.version }}
#     - run: node --version
#     - uses: actions/setup-node@main
#       with:
#         node-version: ${{ matrix.version }}
#     - run: node --version

#   setup-node-stable-versions:
#     name: Stable ${{ matrix.os }} ${{ matrix.version }}
#     runs-on: ${{ matrix.os }}
#     strategy:
#       fail-fast: false
#       matrix:
#         os: [windows-latest, ubuntu-latest]
#         version: [16, 17, 18, 19.2.0, 19.1, lts/-2, latest, lts/gallium]
#     steps:
#     - name: Checkout repository
#       uses: actions/checkout@v3
#     - uses: actions/setup-node@main
#       with:
#         node-version: ${{ matrix.version }}
#     - run: node --version
#     - uses: actions/setup-node@main
#       with:
#         node-version: ${{ matrix.version }}
#     - run: node --version
