name: Setup-java
on:
  workflow_dispatch:

jobs:
  test-ip-ubuntu:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
        distribution: ['current', 'latest', 'node']
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
#     - run: python --version
#     - run: pipx install poetry
    - run: node --version
    - name: Setup Node
      uses: actions/setup-node@v3
      with:
        node-version: current
        architecture: x64
    - run: node --version
    - name: Remove version
      shell: pwsh
      run: |
        if ($IsLinux) {
          rm -rf /opt/hostedtoolcache/Python/3.7.13
          rm -rf /opt/hostedtoolcache/PyPy/3.7.13
        }
    - run: python --version
    - name: Setup Python
      uses: dmitry-shibanov/setup-python@v-dmshib/add-check-latest
      with:
        python-version: "3.7.12"
    - name: Setup Python
      id: setup-python
      uses: dmitry-shibanov/setup-python@v-dmshib/add-check-latest
      with:
        python-version: "3.7"
        check-latest: true
    - run: python --version
#     - name: Remove version
#       shell: pwsh
#       run: |
#         if ($IsLinux) {
#           rm -rf /opt/hostedtoolcache/Python/3.7.13
#         }
#     - run: python --version
    - name: Setup Python
      uses: dmitry-shibanov/setup-python@v-dmshib/add-check-latest
      with:
        python-version: "pypy-3.7-v7.3.3"
    - run: python --version
    - name: Setup Python
      uses: dmitry-shibanov/setup-python@v-dmshib/add-check-latest
      with:
        python-version: "pypy-3.7"
        check-latest: true
    - run: python --version
    
    - name: Setup Python
      uses: dmitry-shibanov/setup-python@v-dmshib/add-check-latest
      with:
        python-version: "pypy-3.7"
        check-latest: true
    - run: python --version
    
    
    - name: Setup Python
      uses: dmitry-shibanov/setup-python@v-dmshib/add-check-latest
      with:
        python-version: "3.11-dev"
#         check-latest: true
    - run: python --version
#     - name: Setup Python
#       uses: dmitry-shibanov/setup-python@v-dmshib/add-check-latest
#       with:
#         python-version: "3.7"
#         check-latest: true
    - run: python --version
#     - run: |
#         python -m pip install --upgrade pip setuptools pipenv virtualenv PyYAML flake8 pylint nose coverage
#         pipenv --python '3.8' lock -r > requirements.txt
#         pip install -r requirements.txt
#     - name: Check
#       run: |
#         python --version
#         echo git `git version`;
#         echo branch `git branch --show-current`;
#         echo node `node -v`;
#         echo pnpm `pnpm -v`
#         echo python `python --version`
#     - run: echo "${{ steps.setup-python.outputs.python-version }}"
# #     - run: |
# #         ls /opt/hostedtoolcache/Java_Temurin-Hotspot_jdk
# #         mv /opt/hostedtoolcache/Java_Temurin-Hotspot_jdk/11.0.14.1-1 /opt/hostedtoolcache/Java_Temurin-Hotspot_jdk/11.0.14
#     - run: rm -rf /opt/hostedtoolcache/Java_Temurin-Hotspot_jdk/*
#     - name: Setup Java
#       uses: actions/setup-java@v3
#       with:
#         java-version: '11'
#         distribution: temurin
    - run: java -version
    - uses: pnpm/action-setup@v2
      with:
        version: 7
    - run: pnpm --version
    - uses: actions/setup-node@v3
      with:
        node-version: 16.9.0
    - run: |
        corepack enable
        pnpm --version
    - run: |
        node --version
        npm --version
    - uses: dmitry-shibanov/setup-node@v-dmshib/add-rc-support
      with:
        node-version: 12.22.12-rc.0
    - run: node --version
    - name: Setup go
      uses: actions/setup-go@v2.2.0
#     - run: |
#         hostname -i
#         echo -e "$(ip addr show eth0 | grep "inet\b" | awk '{print $2}' | cut -d/ -f1)\t$(hostname -f) $(hostname -s)"
#         cat /etc/resolv.conf
    - name: Setup go
      uses: actions/setup-go@v2.2.0
      with:
        go-version: 1.17
        check-latest: false
    - name: Custom setup go
      uses: actions/setup-go@v2.2.0
      with:
        go-version: 1.17
        check-latest: true
    - run: go version
#     - run: rm -rf /opt/hostedtoolcache/go/*
#     - name: Custom setup go1.18beta2
#       uses: dmitry-shibanov/setup-go@v-dmshib/remove-stable-input
#       with:
#         go-version: 1.x
    - name: Install Go
      uses: dmitry-shibanov/setup-go@v-dmshib/remove-stable-input
      with:
        go-version: 1.16.0-rc.1
    - run: go version
  win-setup-node-action:
    name: "WIN: Global npm install with setup-node action"
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v3
        with:
          node-version: 12
      - run: npm --version
      - name: Install latest npm version
        run: npm install --global npm
      - run: npm --version
      - uses: actions/setup-python@v2
        with:
          python-version: '3.11.0-alpha.4'
#       - run: python -m pip install --upgrade pip
      - run: |
          pip --version
          node -e "
            const { spawn } = require('child_process');
            const pipCache = spawn('pip', ['cache', 'dir'], {shell: true});

            pipCache.stdout.on('data', (data) => {
              console.log('stdout:', data.toString());
            });

            pipCache.stderr.on('data', (data) => {
              console.error('stderr:', data.toString());
            });

            pipCache.on('close', (code) => {
              console.log('child process exited with code', code);
            });
            "


  win-preinstalled-node:
    runs-on: ubuntu-latest
    container:
      image:  ubuntu:20.04
    steps:
      - uses: actions/checkout@v2
      - name: Setup Python
        id: setup-python
        uses: actions/setup-python@v3
        with:
          python-version: '3.x'
      - name: Check
        run: |
          echo git `git version`;
          echo branch `git branch --show-current`;
          echo node `node -v`;
          echo pnpm `pnpm -v`
          echo python `python --version`
          
          
  test-setup-node:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
        version: [current, latest, node]
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    - run: node --version
    - name: Setup Node
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.version }}
        architecture: x64
    - run: node --version
