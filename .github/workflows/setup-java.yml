name: Setup-java
on:
  workflow_dispatch:
  
jobs:
  test-ip-ubuntu:
    runs-on: ${{ matrix.os }}
#     defaults:
#       run:
#         shell: bash
#     env:
#       PIP_DISABLE_PIP_VERSION_CHECK: 1
#       PIP_NO_PYTHON_VERSION_WARNING: 1
#       PIP_ROOT_USER_ACTION: ignore
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-20.04, ubuntu-22.04]
        architecture: [arm, armv7l]
    steps:
    - name: Setup Node.js
      uses: louislam/setup-node@fix-armv7-cache # louislam/setup-node@fix-armv7-cache 
      id: setup-node
      with:
        node-version: 16
        architecture: ${{ matrix.architecture }}
        
    - name: Setup Node.js
      uses: louislam/setup-node@fix-armv7-cache
      with:
        node-version: 16
        architecture: ${{ matrix.architecture }}
#       - name: Checkout
#         uses: actions/checkout@v3
# #         with:
# #           repository: pytorch/TensorRT
# #           ref: main
    
    
# #       - run: echo $env:PATH
# #         shell: pwsh
# #       - name: Download python 2.7
# #         run: |
# #           wget https://github.com/actions/python-versions/releases/download/3.10.12-5200619051/python-3.10.12-linux-20.04-x64.tar.gz -O ${{ runner.temp }}/python-3.10.12-linux-20.04-x64.tar.gz
# #           echo "temporary directory"
# #           ls ${{ runner.temp }}
# #           echo "unpack tar.gz"
# #           mkdir ${{ runner.temp }}/python-3.10.12-linux-20.04-x64
# #           tar -xzvf ${{ runner.temp }}/python-3.10.12-linux-20.04-x64.tar.gz -C ${{ runner.temp }}/python-3.10.12-linux-20.04-x64
# #           echo "temporary directory"
# #           ls ${{ runner.temp }}
#       - run: echo ${{ runner.temp }}
#       - run: node -e "const os = require('os');console.log(os.tmpdir())"
#       - run: node -e "console.log(process.env.RUNNER_TEMP)"
# #       - name: Setup NodeJS
# #         uses: actions/setup-node@v3
# #         with:
# #           node-version: 18
# #           architecture: arm64
# #       - run: pip install pandas
# #       - run: python -m pip install --upgrade pip==22.3.1
# #       - run: python3 -m pip debug
#       - name: Run script
#         run: |
#           echo "run script"
#           bash setup.sh
#         working-directory: ${{ runner.temp }}/python-3.10.12-linux-20.04-x64
#       - run: echo "/opt/hostedtoolcache/Python/3.10.12/x64/" >> $GITHUB_PATH
#       - run: python --version



  test-setup-python-pipenv:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-22.04]
    steps:
    - name: Setup Python
      uses: actions/setup-python@v4 # louislam/setup-node@fix-armv7-cache 
      with:
        python-version: 3.9
        
    - run: python --version
    - run: curl https://raw.githubusercontent.com/pypa/pipenv/master/get-pipenv.py | python
    - run: pipenv install flake8 numpy --python 3.9
    - run: ls


  test-setup-node-v3:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-20.04, ubuntu-22.04]
        architecture: [arm, armv7l]
    steps:
    - name: Setup Node.js
      uses: actions/setup-node@v3 # louislam/setup-node@fix-armv7-cache 
      id: setup-node
      with:
        node-version: 16
        architecture: ${{ matrix.architecture }}
        
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: 16
        architecture: ${{ matrix.architecture }}



  setup-node-v3-previous:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-20.04, ubuntu-22.04]
        architecture: [x64]
    steps:
    - name: Setup Node.js
      uses: actions/setup-node@v3 # louislam/setup-node@fix-armv7-cache 
      id: setup-node
      with:
        node-version: 12
        architecture: ${{ matrix.architecture }}
        
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: 12
        architecture: ${{ matrix.architecture }}

#   test-brew:
#     runs-on: ${{ matrix.os }}
#     strategy:
#       fail-fast: false
#       matrix:
#         os: [macos-latest]
#     steps:
# #       - run: rm -rf $RUNNER_TOOL_CACHE/Python/3.7.17
#       - uses: actions/setup-python@v4
#         with:
#           python-version: 3.7
#       - run: python --version
#       - run: python -c "help('modules')"
#       - run: python -c "import bz2"
#       - run: echo -e "import bz2\nc = bz2.compress(b\"\"\"djksaljdljla\"\"\")\nprint(c)" | python
# #       - run: |
# #           ls /usr/local/opt
# #           ls $(brew --prefix bzip2)
# #       - uses: dmitry-shibanov/setup-python@v-dmshib/add-dev-option-pypy
# #         with:
# #           python-version: pypy3.10-v7.3dev
          
#       - run: python --version
#   test-go-unpack-directly:
#     runs-on: ${{ matrix.os }}
#     strategy:
#       fail-fast: false
#       matrix:
#         os: [windows-latest]
#     steps:
#       - uses: dmitry-shibanov/setup-go@unpack-directly
#         with:
#           go-version: 1.17.4
#           cache: false
#       - run: go version
      
      
#   test-go-unpack-os-temp:
#     runs-on: ${{ matrix.os }}
#     strategy:
#       fail-fast: false
#       matrix:
#         os: [windows-latest]
#     steps:
#       - uses: dmitry-shibanov/setup-go@v-dmshib/unpack-to-different-temp
#         with:
#           go-version: 1.17.4
#           cache: false
#       - run: go version
      
      
#   test-go-unpack-disk-d:
#     runs-on: ${{ matrix.os }}
#     strategy:
#       fail-fast: false
#       matrix:
#         os: [windows-latest]
#     steps:
#       - uses: akv-platform/setup-go@performance
#         with:
#           go-version: 1.17.4
#           cache: false
#       - run: go version
#   test-go-default:
#     runs-on: ${{ matrix.os }}
#     strategy:
#       fail-fast: false
#       matrix:
#         os: [windows-latest]
#     steps:
#       - uses: actions/setup-go@v3
#         with:
#           go-version: 1.17.4
#           cache: false
#       - run: go version
#       - run: echo ${{ runner.temp }}
#       - run: node -e "const os = require('os');console.log(os.tmpdir())"
#       - run: node -e "console.log(process.env.RUNNER_TEMP)"
#       - run: node -e "console.log(process.env.RUNNER_ENVIRONMENT)"
